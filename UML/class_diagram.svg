<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1129px" preserveAspectRatio="none" style="width:762px;height:1129px;" version="1.1" viewBox="0 0 762 1129" width="762px" zoomAndPan="magnify"><defs><filter height="300%" id="f4wel4dhwdhlo" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[59b530d44ae785dc18db921986a9c15c]
class Document--><rect fill="#FEFECE" filter="url(#f4wel4dhwdhlo)" height="1110.3164" id="Document" style="stroke: #A80036; stroke-width: 1.5;" width="350" x="6" y="8"/><ellipse cx="147.75" cy="24" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M150.2231,30.1431 Q149.6421,30.4419 149.0029,30.5913 Q148.3638,30.7407 147.6582,30.7407 Q145.1514,30.7407 143.8315,29.0889 Q142.5117,27.437 142.5117,24.3159 Q142.5117,21.1865 143.8315,19.5347 Q145.1514,17.8828 147.6582,17.8828 Q148.3638,17.8828 149.0112,18.0322 Q149.6587,18.1816 150.2231,18.4805 L150.2231,21.2031 Q149.5923,20.6221 148.9988,20.3523 Q148.4053,20.0825 147.7744,20.0825 Q146.4297,20.0825 145.7449,21.1492 Q145.0601,22.2158 145.0601,24.3159 Q145.0601,26.4077 145.7449,27.4744 Q146.4297,28.541 147.7744,28.541 Q148.4053,28.541 148.9988,28.2712 Q149.5923,28.0015 150.2231,27.4204 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="58" x="168.25" y="28.5352">Document</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="355" y1="40" y2="40"/><ellipse cx="17" cy="51" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="26" y="54.6348">_runtimeParams: RuntimeParams</text><ellipse cx="17" cy="63.9551" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="26" y="67.5898">_initParams: RuntimeParams</text><ellipse cx="17" cy="76.9102" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="26" y="80.5449">_worldParams: WorldParams</text><ellipse cx="17" cy="89.8652" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="26" y="93.5">_tmpWorldParams: WorldParams</text><ellipse cx="17" cy="102.8203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="26" y="106.4551">_popLock: Lock *</text><ellipse cx="17" cy="115.7754" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="26" y="119.4102">_statInfo: StatInfo *</text><ellipse cx="17" cy="128.7305" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="26" y="132.3652">«get» Pop: Agent **</text><ellipse cx="17" cy="141.6855" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="26" y="145.3203">«get» QList: Agent *</text><ellipse cx="17" cy="154.6406" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="26" y="158.2754">«get» CList: Agent *</text><ellipse cx="17" cy="167.5957" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="26" y="171.2305">«get» WrapList: MutableArray&lt;WrapInfo *&gt; *</text><ellipse cx="17" cy="180.5508" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="26" y="184.1855">«get» CListP: Agent **</text><ellipse cx="17" cy="193.5059" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="26" y="197.1406">«get» QListP: Agent **</text><ellipse cx="17" cy="206.4609" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="26" y="210.0957">«get» runtimeParamsP: RuntimeParams *</text><ellipse cx="17" cy="219.416" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="26" y="223.0508">«get» initParamsP: RuntimeParams *</text><ellipse cx="17" cy="232.3711" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="26" y="236.0059">«get» worldParamsP: WorldParams *</text><ellipse cx="17" cy="245.3262" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="26" y="248.9609">«get» tmpWorldParamsP: WorldParams *</text><ellipse cx="17" cy="258.2813" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="26" y="261.916">«get» RecovPHist: MutableArray&lt;MyCounter *&gt; *</text><ellipse cx="17" cy="271.2363" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="260" x="26" y="274.8711">«get» IncubPHist: MutableArray&lt;MyCounter *&gt; *</text><ellipse cx="17" cy="284.1914" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="26" y="287.8262">«get» DeathPHist: MutableArray&lt;MyCounter *&gt; *</text><ellipse cx="17" cy="297.1465" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="26" y="300.7813">«get» scenario: Array&lt;any&gt; *</text><ellipse cx="17" cy="310.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="26" y="313.7363">«get» ID: String *</text><ellipse cx="17" cy="323.0566" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="26" y="326.6914">«get» lastTLock: Lock *</text><ellipse cx="17" cy="336.0117" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="26" y="339.6465">«get/set» lastTouch: Date *</text><ellipse cx="17" cy="348.9668" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="26" y="352.6016">«get/set» docKey: Number *</text><ellipse cx="17" cy="361.9219" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="26" y="365.5566">«get/set» stopCallBack: LoopMode -&gt; void</text><ellipse cx="17" cy="374.877" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="26" y="378.5117">«get» statInfo: StatInfo *</text><ellipse cx="17" cy="387.832" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="26" y="391.4668">«get» scenarioPList: Array&lt;any&gt; *</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="397.7871"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="26" y="404.4219">scenarioIndex: NSInteger</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="410.7422"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="26" y="417.377">scenarioPanel: Scenario *</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="423.6973"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="26" y="430.332">paramPanel: ParamPanel *</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="436.6523"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="26" y="443.2871">dataPanel: DataPanel *</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="449.6074"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="26" y="456.2422">loopMode: LoopMode</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="462.5625"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="26" y="469.1973">nPop: NSInteger</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="475.5176"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="26" y="482.1523">nMesh: NSInteger</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="488.4727"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="26" y="495.1074">pop: Agent **</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="501.4277"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="26" y="508.0625">pRange: NSRange *</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="514.3828"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="26" y="521.0176">prevTime: CGFloat</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="527.3379"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="26" y="533.9727">stepsPerSec: CGFloat</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="540.293"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="324" x="26" y="546.9277">newWarpF: NSMutableDictionary&lt;NSNumber *, WarpInfo *&gt; *</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="553.248"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="26" y="559.8828">testees: NSMutableDictionary&lt;NSNumber *, NSNumber *&gt; *</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="566.2031"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="26" y="572.8379">newWarpLock: NSLock *</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="579.1582"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="26" y="585.793">testeesLock: NSLock *</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="592.1133"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="26" y="598.748">animeSteps: NSInteger</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="605.0684"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="26" y="611.7031">stopAtNDays: NSInteger</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="618.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="26" y="624.6582">scenario: NSArray *</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="630.9785"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="26" y="637.6133">predicateToStop: NSPredicate *</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="643.9336"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="26" y="650.5684">testQueHead: TestEntry *</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="656.8887"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="26" y="663.5234">testQueTail: TestEntry *</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="669.8438"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="26" y="676.4785">dispatchQueue: dispatch_queue_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="682.7988"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="26" y="689.4336">dispatchGroup: dispatch_group_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="695.7539"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="26" y="702.3887">orgWindowSize: NSSize</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="708.709"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="26" y="715.3438">orgViewSize: NSSize</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="721.6641"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="26" y="728.2988">runtimeTimer: NSTimer *</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="121" x="26" y="741.2539">testEntriesLock: Lock *</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="355" y1="747.5742" y2="747.5742"/><ellipse cx="17" cy="758.5742" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="26" y="762.209">running(): Bool</text><ellipse cx="17" cy="771.5293" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="26" y="775.1641">popLock(): void</text><ellipse cx="17" cy="784.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="26" y="788.1191">popUnlock(): void</text><ellipse cx="17" cy="797.4395" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="26" y="801.0742">testInfectionOfAgent(agent: Agent *, reason: TestType): void</text><ellipse cx="17" cy="810.3945" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="26" y="814.0293">addNewWarp(info: WarpInfo *): void</text><ellipse cx="17" cy="823.3496" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="26" y="826.9844">touch(): Bool</text><ellipse cx="17" cy="836.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="26" y="839.9395">start(stopAt: Integer): void</text><ellipse cx="17" cy="849.2598" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="26" y="852.8945">step(): void</text><ellipse cx="17" cy="862.2148" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="26" y="865.8496">stop(): void</text><ellipse cx="17" cy="875.1699" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="26" y="878.8047">resetPop(): void</text><ellipse cx="17" cy="888.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="26" y="891.7598">setScenarioWithPList(plist: Array&lt;any&gt;*): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="898.0801"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="26" y="904.7148">addOperation(block: void -&gt; void): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="911.0352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="26" y="917.6699">waitAllOperations(): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="923.9902"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="26" y="930.625">addInfected(n: Integer): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="936.9453"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="26" y="943.5801">execScenario(): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="286" x="26" y="956.5352">phase_info(scen: Array&lt;any&gt; *): Array&lt;Number *&gt; *</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="962.8555"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="26" y="969.4902">resetPop(): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="975.8105"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="26" y="982.4453">init(): instancetype</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="252" x="26" y="995.4004">property_from_element(elm: Object *): Object *</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="259" x="26" y="1008.3555">element_property_from(prop: Object *): Object *</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="1014.6758"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="26" y="1021.3105">scenarioPList(): Array&lt;any&gt; *</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="1027.6309"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="26" y="1034.2656">documentDictionary(): Dictionary *</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="1040.5859"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="26" y="1047.2207">readFromDictionary(dict: Dictionary *)</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="1053.541"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="26" y="1060.1758">deliverTestResults(testCount: NSUInteger *): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="1066.4961"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="26" y="1073.1309">gridToGridA(iA: Integer, iB: Integer): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="1079.4512"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="26" y="1086.0859">doOneStep(): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="1092.4063"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="26" y="1099.041">runningLoop(): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="1105.3613"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="26" y="1111.9961">goAhead(): void</text><!--MD5=[9d5861e0d8380dccb8f293ae2e87267a]
class WarpInfo--><rect fill="#FEFECE" filter="url(#f4wel4dhwdhlo)" height="99.8203" id="WarpInfo" style="stroke: #A80036; stroke-width: 1.5;" width="360" x="391" y="513"/><ellipse cx="541.25" cy="529" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M543.7231,535.1431 Q543.1421,535.4419 542.5029,535.5913 Q541.8638,535.7407 541.1582,535.7407 Q538.6514,535.7407 537.3315,534.0889 Q536.0117,532.437 536.0117,529.3159 Q536.0117,526.1865 537.3315,524.5347 Q538.6514,522.8828 541.1582,522.8828 Q541.8638,522.8828 542.5112,523.0322 Q543.1587,523.1816 543.7231,523.4805 L543.7231,526.2031 Q543.0923,525.6221 542.4988,525.3523 Q541.9053,525.0825 541.2744,525.0825 Q539.9297,525.0825 539.2449,526.1492 Q538.5601,527.2158 538.5601,529.3159 Q538.5601,531.4077 539.2449,532.4744 Q539.9297,533.541 541.2744,533.541 Q541.9053,533.541 542.4988,533.2712 Q543.0923,533.0015 543.7231,532.4204 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="51" x="561.75" y="533.5352">WarpInfo</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="392" x2="750" y1="545" y2="545"/><ellipse cx="402" cy="556" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="411" y="559.6348">agent; Agent *</text><ellipse cx="402" cy="568.9551" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="56" x="411" y="572.5898">goal: Point</text><ellipse cx="402" cy="581.9102" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="411" y="585.5449">mode: WarpType</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="392" x2="750" y1="591.8652" y2="591.8652"/><ellipse cx="402" cy="602.8652" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="334" x="411" y="606.5">initWithAgent(a: Agent *, p :Point, md: WarpType): instancetype</text><!--MD5=[dd70b0dbf9eea169c459bae060060fe7]
@startuml class_diagram

class Document {
  + _runtimeParams: RuntimeParams
  + _initParams: RuntimeParams
  + _worldParams: WorldParams
  + _tmpWorldParams: WorldParams
  + _popLock: Lock *
  + _statInfo: StatInfo *
  + «get» Pop: Agent **
  + «get» QList: Agent *
  + «get» CList: Agent *
  + «get» WrapList: MutableArray<WrapInfo *> *
  + «get» CListP: Agent **
  + «get» QListP: Agent **
  + «get» runtimeParamsP: RuntimeParams *
  + «get» initParamsP: RuntimeParams *
  + «get» worldParamsP: WorldParams *
  + «get» tmpWorldParamsP: WorldParams *
  + running(): Bool
  + popLock(): void
  + popUnlock(): void
  + «get» RecovPHist: MutableArray<MyCounter *> *
  + «get» IncubPHist: MutableArray<MyCounter *> *
  + «get» DeathPHist: MutableArray<MyCounter *> *
  + «get» scenario: Array<any> *
  + testInfectionOfAgent(agent: Agent *, reason: TestType): void
  + addNewWarp(info: WarpInfo *): void
  + «get» ID: String *
  + «get» lastTLock: Lock *
  + «get/set» lastTouch: Date *
  + «get/set» docKey: Number *
  + «get/set» stopCallBack: LoopMode -> void
  + touch(): Bool
  + start(stopAt: Integer): void
  + step(): void
  + stop(): void
  + resetPop(): void
  + «get» statInfo: StatInfo *
  + «get» scenarioPList: Array<any> *
  + setScenarioWithPList(plist: Array<any>*): void
	- scenarioIndex: NSInteger
	- scenarioPanel: Scenario *
	- paramPanel: ParamPanel *
	- dataPanel: DataPanel *
	- loopMode: LoopMode
	- nPop: NSInteger
  - nMesh: NSInteger
	- pop: Agent **
	- pRange: NSRange *
	- prevTime: CGFloat
  - stepsPerSec: CGFloat
	- newWarpF: NSMutableDictionary<NSNumber *, WarpInfo *> *
	- testees: NSMutableDictionary<NSNumber *, NSNumber *> *
	- newWarpLock: NSLock *
	- testeesLock: NSLock *
	- animeSteps: NSInteger 
  - stopAtNDays: NSInteger
	- scenario: NSArray *
	- predicateToStop: NSPredicate *
	- testQueHead: TestEntry *
	- testQueTail: TestEntry *
	- dispatchQueue: dispatch_queue_t
	- dispatchGroup: dispatch_group_t
	- orgWindowSize: NSSize
	- orgViewSize: NSSize
	- runtimeTimer: NSTimer *
  - addOperation(block: void -> void): void
  - waitAllOperations(): void
  - addInfected(n: Integer): void
  - execScenario(): void
  {static} phase_info(scen: Array<any> *): Array<Number *> *
  - resetPop(): void
  - init(): instancetype
  {static} property_from_element(elm: Object *): Object *
  {static} element_property_from(prop: Object *): Object *
  - scenarioPList(): Array<any> *
  - documentDictionary(): Dictionary *
  - readFromDictionary(dict: Dictionary *)
  {static} testEntriesLock: Lock *
  - deliverTestResults(testCount: NSUInteger *): void
  - gridToGridA(iA: Integer, iB: Integer): void
  ' {static} N_MTIME: int
  ' {static} mtime: unsigned long[]
  ' {static} mCount: Integer
  ' {static} mCount2: Integer
  - doOneStep(): void
  - runningLoop(): void
  - goAhead(): void
}

class WarpInfo {
  + agent; Agent *
  + goal: Point
  + mode: WarpType
  + initWithAgent(a: Agent *, p :Point, md: WarpType): instancetype
}
@enduml

@startuml class_diagram

class Document {
  + _runtimeParams: RuntimeParams
  + _initParams: RuntimeParams
  + _worldParams: WorldParams
  + _tmpWorldParams: WorldParams
  + _popLock: Lock *
  + _statInfo: StatInfo *
  + «get» Pop: Agent **
  + «get» QList: Agent *
  + «get» CList: Agent *
  + «get» WrapList: MutableArray<WrapInfo *> *
  + «get» CListP: Agent **
  + «get» QListP: Agent **
  + «get» runtimeParamsP: RuntimeParams *
  + «get» initParamsP: RuntimeParams *
  + «get» worldParamsP: WorldParams *
  + «get» tmpWorldParamsP: WorldParams *
  + running(): Bool
  + popLock(): void
  + popUnlock(): void
  + «get» RecovPHist: MutableArray<MyCounter *> *
  + «get» IncubPHist: MutableArray<MyCounter *> *
  + «get» DeathPHist: MutableArray<MyCounter *> *
  + «get» scenario: Array<any> *
  + testInfectionOfAgent(agent: Agent *, reason: TestType): void
  + addNewWarp(info: WarpInfo *): void
  + «get» ID: String *
  + «get» lastTLock: Lock *
  + «get/set» lastTouch: Date *
  + «get/set» docKey: Number *
  + «get/set» stopCallBack: LoopMode -> void
  + touch(): Bool
  + start(stopAt: Integer): void
  + step(): void
  + stop(): void
  + resetPop(): void
  + «get» statInfo: StatInfo *
  + «get» scenarioPList: Array<any> *
  + setScenarioWithPList(plist: Array<any>*): void
	- scenarioIndex: NSInteger
	- scenarioPanel: Scenario *
	- paramPanel: ParamPanel *
	- dataPanel: DataPanel *
	- loopMode: LoopMode
	- nPop: NSInteger
  - nMesh: NSInteger
	- pop: Agent **
	- pRange: NSRange *
	- prevTime: CGFloat
  - stepsPerSec: CGFloat
	- newWarpF: NSMutableDictionary<NSNumber *, WarpInfo *> *
	- testees: NSMutableDictionary<NSNumber *, NSNumber *> *
	- newWarpLock: NSLock *
	- testeesLock: NSLock *
	- animeSteps: NSInteger 
  - stopAtNDays: NSInteger
	- scenario: NSArray *
	- predicateToStop: NSPredicate *
	- testQueHead: TestEntry *
	- testQueTail: TestEntry *
	- dispatchQueue: dispatch_queue_t
	- dispatchGroup: dispatch_group_t
	- orgWindowSize: NSSize
	- orgViewSize: NSSize
	- runtimeTimer: NSTimer *
  - addOperation(block: void -> void): void
  - waitAllOperations(): void
  - addInfected(n: Integer): void
  - execScenario(): void
  {static} phase_info(scen: Array<any> *): Array<Number *> *
  - resetPop(): void
  - init(): instancetype
  {static} property_from_element(elm: Object *): Object *
  {static} element_property_from(prop: Object *): Object *
  - scenarioPList(): Array<any> *
  - documentDictionary(): Dictionary *
  - readFromDictionary(dict: Dictionary *)
  {static} testEntriesLock: Lock *
  - deliverTestResults(testCount: NSUInteger *): void
  - gridToGridA(iA: Integer, iB: Integer): void
  - doOneStep(): void
  - runningLoop(): void
  - goAhead(): void
}

class WarpInfo {
  + agent; Agent *
  + goal: Point
  + mode: WarpType
  + initWithAgent(a: Agent *, p :Point, md: WarpType): instancetype
}
@enduml

PlantUML version 1.2020.10(Sun May 17 18:35:57 JST 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 15+36
Operating System: Mac OS X
Default Encoding: UTF-8
Language: en
Country: JP
--></g></svg>